task.wait(5)
loadstring(game:HttpGet('https://pastebin.com/raw/jWHsGK0H'))()

local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local TweenService = game:GetService("TweenService")

-- Create and configure the blur effect
local blurEffect = Instance.new("BlurEffect")
blurEffect.Size = 0
blurEffect.Parent = Lighting

-- Create and configure the ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create and configure the ImageLabel
local imageLabel = Instance.new("ImageLabel")
imageLabel.Size = UDim2.new(0, 303, 0, 263)
imageLabel.Position = UDim2.new(0.5, -151, 0.5, -131)
imageLabel.BackgroundTransparency = 1
imageLabel.Image = "rbxassetid://83828224755095" -- Replace with your image asset ID
imageLabel.ImageTransparency = 1
imageLabel.ZIndex = 10
imageLabel.Visible = true
imageLabel.Parent = screenGui

-- Animate the blur and image transparency
-- Animate the blur and image transparency
for i = 1, 50, 2 do
    blurEffect.Size = i
    imageLabel.ImageTransparency = math.clamp(imageLabel.ImageTransparency - 0.1, 0, 1)
    wait()
end

-- Wait for 3 seconds before proceeding
wait(3)

-- Tween the image position
local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
local targetPosition = UDim2.new(0.5, 342 / 1, 0.5, 263 / 2)
local tween = TweenService:Create(imageLabel, tweenInfo, {Position = targetPosition})
tween:Play()
tween.Completed:Wait()


-- Clean up
blurEffect:Destroy()
screenGui:Destroy()


local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "OBSCURA|Aladia PVP| ONLY USE SILENCED PISTOL!",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "OBSCURA",
   LoadingSubtitle = "by External",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Aladia"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local ATab = Window:CreateTab("Aim", "crosshair") -- Title, Image
local ETab = Window:CreateTab("Visuals", "scan-eye" ) -- Title, Image
local MTab = Window:CreateTab("Misc", "notepad-text") -- Title, Image
local STab = Window:CreateTab("Themes", "Cog" ) -- Title, Image
local CTab = Window:CreateTab("Credits", "notepad-text") -- Title, Image

Window.ModifyTheme('Ocean')-- getvisual.cc






getgenv().select_options = nil 
--Theme Name - ThemeIdentifier

--Default - Default
--Amber Glow - AmberGlow
--Amethyst - Amethyst
--Bloom - Bloom
--Dark Blue - DarkBlue
--Green - Green
--Light - Light
--Ocean - Ocean
--Serenity - Serenity


print('Adonis Bypassed')
task.wait(0.2)
print('Loading')

task.wait(2)
Rayfield:Notify({
    Title = "Bypass",
    Content = "Bypassed Adonis",
    Duration = 6.5,
    Image = 4483362458,
 })

 Rayfield:Notify({
    Title = "Loader",
    Content = "Loading Script!",
    Duration = 6.5,
    Image = 4483362458,
 })

 task.wait(3)

Rayfield:Notify({
    Title = "Loaded in %",
    Content = "Loaded Quantum in 4ms!",
    Duration = 6.5,
    Image = 4483362458,
 })


 
Rayfield:Notify({
    Title = "AC",
    Content = "AC Succesfully bypassed!",
    Duration = 6.5,
    Image = 4483362458,
 })

 local Toggle = ATab:CreateToggle({
    Name = "Aimbot",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera


local AimEnabled = false
local Smoothness = 0.08      
local AimbotMode = "Instant"  -- "Instant" or "Smooth"
local MaxFOV = 60          -- Max pixel radius from mouse to consider a target
local FOVCircleRadius = 60   
local FOVCircle = Drawing.new("Circle") -- Creating a drawing object for the FOV Circle


FOVCircle.Thickness = 1
FOVCircle.Color = Color3.fromRGB(255, 0, 0)  
FOVCircle.Filled = true    
FOVCircle.Transparency = 0.3 
FOVCircle.Visible = true

-- Update the position of the FOV Circle to be at the center of the screen
-- Update the position of the FOV Circle to always be at the center of the screen
local function updateFOVCircle()
    -- Get the screen center position
    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    -- Set the FOV circle to be at the center
    FOVCircle.Position = screenCenter
    FOVCircle.Radius = FOVCircleRadius
end

-- Gets the aimable body part of the character (for R6/R15)
local function getBody(character)
    return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso")
end

-- Get closest visible player within FOV
local function getClosestPlayer()
    local closest = nil
    local shortest = MaxFOV

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local character = player.Character
            local humanoid = character:FindFirstChildOfClass("Humanoid")

            if humanoid and humanoid.Health > 0 then
                local part = getBody(character)
                if part then
                    local screenPos, onScreen = Camera:WorldToScreenPoint(part.Position)
                    if onScreen then
                        local dist = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                        if dist < shortest then
                            shortest = dist
                            closest = part
                        end
                    end
                end
            end
        end
    end

    return closest
end

-- Smooth or instant aim toward the target
local function aimAtTarget()
    local targetPart = getClosestPlayer()
    if targetPart then
        local targetPos = targetPart.Position
        local camPos = Camera.CFrame.Position
        local aimCFrame = CFrame.new(camPos, targetPos)

        if AimbotMode == "Instant" then
            Camera.CFrame = aimCFrame
        else
            Camera.CFrame = Camera.CFrame:Lerp(aimCFrame, Smoothness)
        end
    end
end

-- Toggle aimbot with right-click hold
UserInputService.InputBegan:Connect(function(input, processed)
    if not processed and input.UserInputType == Enum.UserInputType.MouseButton2 then
        AimEnabled = true
    end
end)

UserInputService.InputEnded:Connect(function(input, processed)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        AimEnabled = false
    end
end)

-- Main loop
RunService.RenderStepped:Connect(function()
    if AimEnabled then
        aimAtTarget()
    end

    -- Update the FOV circle's position on the screen
    updateFOVCircle()
end)
    end,
 })

 local Divider = ATab:CreateDivider()
 



 

--Default - Default
--Amber Glow - AmberGlow
--Amethyst - Amethyst
--Bloom - Bloom
--Dark Blue - DarkBlue
--Green - Green
--Light - Light
--Ocean - Ocean
--Serenity - Serenity

local Button = STab:CreateButton({
	Name = "Default Theme",
	Callback = function()
		Window.ModifyTheme('Default')-- getvisual.cc
	end,
 })

 local Button = STab:CreateButton({
	Name = "AmberGlow Theme",
	Callback = function()
		Window.ModifyTheme('AmberGlow')-- getvisual.cc
	end,
 })

 local Button = STab:CreateButton({
	Name = "Amethyst Theme",
	Callback = function()
		Window.ModifyTheme('Amethyst')-- getvisual.cc
	end,
 })

 local Button = STab:CreateButton({
	Name = "Bloom Theme",
	Callback = function()
		Window.ModifyTheme('Bloom')-- getvisual.cc
	end,
 })

 local Button = STab:CreateButton({
	Name = "Dark Blue Theme",
	Callback = function()
		Window.ModifyTheme('DarkBlue')-- getvisual.cc
	end,
 })

 local Button = STab:CreateButton({
	Name = "Green Theme",
	Callback = function()
		Window.ModifyTheme('Green')-- getvisual.cc
	end,
 })

 local Button = STab:CreateButton({
	Name = "Light Theme",
	Callback = function()
		Window.ModifyTheme('Light')-- getvisual.cc
	end,
 })

 local Button = STab:CreateButton({
	Name = "Ocean Theme",
	Callback = function()
		Window.ModifyTheme('Ocean')-- getvisual.cc
	end,
 })

 local Button = STab:CreateButton({
	Name = "Serenity Theme",
	Callback = function()
		Window.ModifyTheme('Serenity')-- getvisual.cc
	end,
 })


 local Label = CTab:CreateLabel("Created By X64.External", "square-pen", Color3.fromRGB(255, 255, 255), false) -- Title, Icon, Color, IgnoreTheme
 local Label = CTab:CreateLabel("Quantum Script Studios (External, Luabit )", 4483362458, Color3.fromRGB(255, 255, 255), false) -- Title, Icon, Color, IgnoreTheme


 
 local Slider = MTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {0, 200}, -- Min: 0, Max: 200
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16, -- Default WalkSpeed
    Flag = "Walkspeed", 
    Callback = function(Value)
        -- Ensure the Value is a number and set the WalkSpeed
        _G.WS = Value

        -- Get the player's humanoid
        local Humanoid = game:GetService("Players").LocalPlayer.Character.Humanoid

        -- Ensure the humanoid is valid and connected
        if Humanoid then
            -- Update WalkSpeed immediately
            Humanoid.WalkSpeed = _G.WS

            -- Listen for any changes to WalkSpeed and maintain the value
            Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                Humanoid.WalkSpeed = _G.WS
            end)
        end
    end,
})



local Toggle = ETab:CreateToggle({
	Name = "Box Esp",
	CurrentValue = false,
	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local ESPObjects = {}

-- Clean up ESP
local function removeESP(player)
    local esp = ESPObjects[player]
    if esp then
        if esp.Box then esp.Box:Remove() end
        ESPObjects[player] = nil
    end
end

-- Create Box ESP visuals
local function createESP(player)
    if player == LocalPlayer then return end

    removeESP(player)

    local box = Drawing.new("Square")
    box.Thickness = 1
    box.Filled = false
    box.Color = Color3.fromRGB(0, 0, 255)  -- Blue color for the box
    box.Transparency = 1
    box.Visible = false

    ESPObjects[player] = {
        Box = box,
    }

    -- Handle character respawn
    player.CharacterAdded:Connect(function()
        task.wait(1)
        createESP(player)
    end)

    player.CharacterRemoving:Connect(function()
        removeESP(player)
    end)

    -- Handle death cleanup
    if player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Died:Connect(function()
                removeESP(player)
            end)
        end
    end
end

-- Get the top/bottom of the character (for R6 or R15)
local function getCharacterBounds(character)
    local parts = {}

    for _, part in ipairs(character:GetChildren()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            table.insert(parts, part)
        end
    end

    local top, bottom = nil, nil

    for _, part in ipairs(parts) do
        if not top or part.Position.Y > top.Y then
            top = part.Position
        end
        if not bottom or part.Position.Y < bottom.Y then
            bottom = part.Position
        end
    end

    return top, bottom
end

-- Drawing loop for Box ESP
RunService.RenderStepped:Connect(function()
    for player, esp in pairs(ESPObjects) do
        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local root = character.HumanoidRootPart
            local top, bottom = getCharacterBounds(character)
            if not top or not bottom then continue end

            local topScreen, topOnScreen = Camera:WorldToViewportPoint(top)
            local bottomScreen, bottomOnScreen = Camera:WorldToViewportPoint(bottom)

            if topOnScreen and bottomOnScreen then
                local height = math.abs(topScreen.Y - bottomScreen.Y)
                local width = height / 2
                local centerX = (topScreen.X + bottomScreen.X) / 2

                esp.Box.Size = Vector2.new(width, height)
                esp.Box.Position = Vector2.new(centerX - width / 2, topScreen.Y)
                esp.Box.Visible = true
            else
                esp.Box.Visible = false
            end
        else
            if esp then
                esp.Box.Visible = false
            end
        end
    end
end)

-- Initial setup for ESP
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        createESP(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        task.wait(1)
        createESP(player)
    end)
end)

Players.PlayerRemoving:Connect(removeESP)
	end,
 })


 local Toggle = ETab:CreateToggle({
	Name = "Health Bar Esp",
	CurrentValue = false,
	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
	local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local ESPObjects = {}

-- Clean up ESP
local function removeESP(player)
    local esp = ESPObjects[player]
    if esp then
        if esp.HealthBar then esp.HealthBar:Remove() end
        ESPObjects[player] = nil
    end
end

-- Create Health Bar ESP visuals
local function createESP(player)
    if player == LocalPlayer then return end

    removeESP(player)

    local healthBar = Drawing.new("Line")
    healthBar.Thickness = 2
    healthBar.Color = Color3.fromRGB(0, 255, 0)  -- Green color for health bar
    healthBar.Visible = false

    ESPObjects[player] = {
        HealthBar = healthBar,
    }

    -- Handle character respawn
    player.CharacterAdded:Connect(function()
        task.wait(1)
        createESP(player)
    end)

    player.CharacterRemoving:Connect(function()
        removeESP(player)
    end)

    -- Handle death cleanup
    if player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Died:Connect(function()
                removeESP(player)
            end)
        end
    end
end

-- Get the top/bottom of the character (for R6 or R15)
local function getCharacterBounds(character)
    local parts = {}

    for _, part in ipairs(character:GetChildren()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            table.insert(parts, part)
        end
    end

    local top, bottom = nil, nil

    for _, part in ipairs(parts) do
        if not top or part.Position.Y > top.Y then
            top = part.Position
        end
        if not bottom or part.Position.Y < bottom.Y then
            bottom = part.Position
        end
    end

    return top, bottom
end

-- Drawing loop for Health Bar ESP
RunService.RenderStepped:Connect(function()
    for player, esp in pairs(ESPObjects) do
        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local root = character.HumanoidRootPart
                local top, bottom = getCharacterBounds(character)
                if not top or not bottom then continue end

                local topScreen, topOnScreen = Camera:WorldToViewportPoint(top)
                local bottomScreen, bottomOnScreen = Camera:WorldToViewportPoint(bottom)

                if topOnScreen and bottomOnScreen then
                    -- Calculate health bar position and size
                    local healthHeight = math.abs(topScreen.Y - bottomScreen.Y)
                    local healthWidth = 5  -- Width of the health bar
                    local healthPercentage = humanoid.Health / humanoid.MaxHealth
                    local healthBarHeight = healthHeight * healthPercentage
                    local healthBarTopY = topScreen.Y + healthHeight / 2 - healthBarHeight / 2

                    -- Draw the health bar
                    esp.HealthBar.From = Vector2.new(topScreen.X + 10, healthBarTopY)
                    esp.HealthBar.To = Vector2.new(topScreen.X + 10, healthBarTopY + healthBarHeight)
                    esp.HealthBar.Visible = true
                else
                    esp.HealthBar.Visible = false
                end
            else
                if esp then
                    esp.HealthBar.Visible = false
                end
            end
        else
            if esp then
                esp.HealthBar.Visible = false
            end
        end
    end
end)

-- Initial setup for Health Bar ESP
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        createESP(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        task.wait(1)
        createESP(player)
    end)
end)

Players.PlayerRemoving:Connect(removeESP)
	end,
 })

 local Toggle = ATab:CreateToggle({
	Name = "Wall Check",
	CurrentValue = false,
	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
	-- The function that takes place when the toggle is pressed
	-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
 })

local Toggle = ETab:CreateToggle({
   Name = "Name tag ESP",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
  local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local ESPObjects = {}

-- Clean up ESP
local function removeESP(player)
    local esp = ESPObjects[player]
    if esp then
        if esp.Name then esp.Name:Remove() end
        ESPObjects[player] = nil
    end
end

-- Create Name ESP visuals
local function createESP(player)
    if player == LocalPlayer then return end

    removeESP(player)

    local nameTag = Drawing.new("Text")
    nameTag.Size = 14
    nameTag.Center = true
    nameTag.Outline = true
    nameTag.Color = Color3.fromRGB(0, 0, 255)  -- Blue color for name tag
    nameTag.Text = player.Name
    nameTag.Visible = false

    ESPObjects[player] = {
        Name = nameTag,
    }

    -- Handle character respawn
    player.CharacterAdded:Connect(function()
        task.wait(1)
        createESP(player)
    end)

    player.CharacterRemoving:Connect(function()
        removeESP(player)
    end)

    -- Handle death cleanup
    if player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Died:Connect(function()
                removeESP(player)
            end)
        end
    end
end

-- Get the top/bottom of the character (for R6 or R15)
local function getCharacterBounds(character)
    local parts = {}

    for _, part in ipairs(character:GetChildren()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            table.insert(parts, part)
        end
    end

    local top, bottom = nil, nil

    for _, part in ipairs(parts) do
        if not top or part.Position.Y > top.Y then
            top = part.Position
        end
        if not bottom or part.Position.Y < bottom.Y then
            bottom = part.Position
        end
    end

    return top, bottom
end

-- Drawing loop for Name ESP
RunService.RenderStepped:Connect(function()
    for player, esp in pairs(ESPObjects) do
        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local root = character.HumanoidRootPart
            local top, bottom = getCharacterBounds(character)
            if not top or not bottom then continue end

            local topScreen, topOnScreen = Camera:WorldToViewportPoint(top)

            if topOnScreen then
                local centerX = (topScreen.X)

                esp.Name.Text = player.Name
                esp.Name.Position = Vector2.new(centerX, topScreen.Y - 16)
                esp.Name.Visible = true
            else
                esp.Name.Visible = false
            end
        else
            if esp then
                esp.Name.Visible = false
            end
        end
    end
end)

-- Initial setup for Name ESP
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        createESP(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        task.wait(1)
        createESP(player)
    end)
end)

Players.PlayerRemoving:Connect(removeESP)
   end,
})

 local Toggle = ATab:CreateToggle({
	Name = "Alive Check",
	CurrentValue = false,
	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
	-- The function that takes place when the toggle is pressed
	-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
 })

 local Toggle = ATab:CreateToggle({
	Name = "Team Check",
	CurrentValue = false,
	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
	-- The function that takes place when the toggle is pressed
	-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
 })

 local Divider = ATab:CreateDivider()
 
 
 local Dropdown = ETab:CreateDropdown({
    Name = "Skybox Changer",
    Options = {"Asthetic Sky"},
    CurrentOption = {"Option 1"},
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file
    Callback = function(Options)
        -- Check if "Asthetic Sky" was selected
        if Options[1] == "Asthetic Sky" then
			getgenv().Lighting = game:GetService'Lighting'
			getgenv().RunService = game:GetService'RunService'
			
			local ColorCorrection = false
			local Correction = false
			local SunRays = false
			-- Change it to On and Off (true & false)
			Skybox = Instance.new("Sky", Lighting)
			Skybox.SkyboxBk = "rbxassetid://92464172"
			Skybox.SkyboxDn = "rbxassetid://92464250"
			Skybox.SkyboxFt = "rbxassetid://92464217"
			Skybox.SkyboxLf = "rbxassetid://92464234"
			Skybox.SkyboxRt = "rbxassetid://92464189"
			Skybox.SkyboxUp = "rbxassetid://92464157"
			
			RunService.Stepped:Connect(function()
			   if Lighting then
				  if Lighting:FindFirstChild"ColorCorrection" then
					 if not ColorCorrection then
						Lighting:WaitForChild"ColorCorrection":Destroy()
					 else
						return nil
					 end
				  elseif Lighting:FindFirstChild"Correction" then
					 if not Correction then
						Lighting:WaitForChild"Correction":Destroy()
					 else
						return nil
					 end
				  elseif Lighting:FindFirstChildOfClass"SunRaysEffect" then
					 if not SunRays then
						Lighting:WaitForChild"SunRaysEffect":Destroy()
					 else
						return nil
					 end
				  end
			   end
			end)
		end
    end,
})


local Toggle = ETab:CreateToggle({
   Name = "Visible Check",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
  local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera

-- Settings
local AimEnabled = false
local Smoothness = 0.08      -- Lower is slower/smoother
local AimbotMode = "Instant"  -- "Instant" or "Smooth"
local MaxFOV = 80          -- Max pixel radius from mouse to consider a target
local FOVCircleRadius = 80   -- The radius of the FOV Circle
local FOVCircle = Drawing.new("Circle") -- Creating a drawing object for the FOV Circle

-- FOV Circle Settings
FOVCircle.Thickness = 1
FOVCircle.Color = Color3.fromRGB(255, 0, 0)  -- Red circle
FOVCircle.Filled = true     -- Make the circle filled
FOVCircle.Transparency = 0 -- 0 is fully opaque, 1 is fully transparent (0.5 is semi-transparent)
FOVCircle.Visible = true

-- ESP Text Settings
local ESPText = {}

-- FOV Circle Settings
FOVCircle.Thickness = 1
FOVCircle.Color = Color3.fromRGB(255, 0, 0)  -- Red circle
FOVCircle.Filled = true     -- Make the circle filled
FOVCircle.Transparency = 0 -- 0 is fully opaque, 1 is fully transparent (0.5 is semi-transparent)
FOVCircle.Visible = true

-- Update the position of the FOV Circle to always be at the center of the screen
local function updateFOVCircle()
    -- Get the screen center position
    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    -- Set the FOV circle to be at the center
    FOVCircle.Position = screenCenter
    FOVCircle.Radius = FOVCircleRadius
end

-- Gets the aimable body part of the character (for R6/R15)
local function getBody(character)
    return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso")
end

-- Raycast to check if the player is visible
local function isVisible(player)
    local character = player.Character
    if not character then return false end

    local humanoidRoot = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRoot then return false end

    local screenPos, onScreen = Camera:WorldToScreenPoint(humanoidRoot.Position)
    if not onScreen then
        return false
    end

    -- Perform a raycast from the camera to the humanoid root part
    local ray = Ray.new(Camera.CFrame.Position, (humanoidRoot.Position - Camera.CFrame.Position).unit * 500)
    local hit = Workspace:Raycast(ray.Origin, ray.Direction)

    if hit and hit.Instance.Parent == character then
        return true
    else
        return false
    end
end

-- Get closest visible player within FOV
local function getClosestPlayer()
    local closest = nil
    local shortest = MaxFOV

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local character = player.Character
            local humanoid = character:FindFirstChildOfClass("Humanoid")

            if humanoid and humanoid.Health > 0 then
                local part = getBody(character)
                if part then
                    local screenPos, onScreen = Camera:WorldToScreenPoint(part.Position)
                    if onScreen then
                        local dist = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                        if dist < shortest then
                            shortest = dist
                            closest = part
                        end
                    end
                end
            end
        end
    end

    return closest
end

-- Smooth or instant aim toward the target
local function aimAtTarget()
    local targetPart = getClosestPlayer()
    if targetPart then
        local targetPos = targetPart.Position
        local camPos = Camera.CFrame.Position
        local aimCFrame = CFrame.new(camPos, targetPos)

        if AimbotMode == "Instant" then
            Camera.CFrame = aimCFrame
        else
            Camera.CFrame = Camera.CFrame:Lerp(aimCFrame, Smoothness)
        end
    end
end

-- Toggle aimbot with right-click hold
UserInputService.InputBegan:Connect(function(input, processed)
    if not processed and input.UserInputType == Enum.UserInputType.MouseButton2 then
        AimEnabled = true
    end
end)

UserInputService.InputEnded:Connect(function(input, processed)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        AimEnabled = false
    end
end)

-- Update ESP Text
local function updateESP()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local character = player.Character
            local humanoidRoot = character:FindFirstChild("HumanoidRootPart")
            if humanoidRoot then
                local screenPos, onScreen = Camera:WorldToScreenPoint(humanoidRoot.Position)
                if onScreen then
                    if isVisible(player) then
                        -- Display "Visible" text
                        if not ESPText[player] then
                            ESPText[player] = Drawing.new("Text")
                            ESPText[player].Color = Color3.fromRGB(0, 255, 0)  -- Green text
                            ESPText[player].Size = 18
                            ESPText[player].Outline = true
                        end
                        ESPText[player].Text = "Visible"
                        ESPText[player].Position = Vector2.new(screenPos.X, screenPos.Y - 20)
                        ESPText[player].Visible = true
                    else
                        if ESPText[player] then
                            ESPText[player].Visible = false
                        end
                    end
                end
            end
        end
    end
end

-- Main loop
RunService.RenderStepped:Connect(function()
    if AimEnabled then
        aimAtTarget()
    end

    -- Update the FOV circle's position on the screen
    updateFOVCircle()

    -- Update ESP for visibility
    updateESP()
end)
   end,
})

local Toggle = MTab:CreateToggle({
   Name = "Zoom(T)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
 local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera

-- Store the normal FOV and the zoomed-in FOV
local normalFOV = Camera.FieldOfView
local zoomedInFOV = 30
local isZoomedIn = false

-- Function to toggle the FOV between normal and zoomed-in
local function toggleFOV()
    if isZoomedIn then
        -- Revert to normal FOV
        Camera.FieldOfView = normalFOV
    else
        -- Zoom in to the FOV of 30
        Camera.FieldOfView = zoomedInFOV
    end
    -- Toggle the zoom state
    isZoomedIn = not isZoomedIn
end

-- Listen for the "T" key press to toggle FOV
UserInputService.InputBegan:Connect(function(input, processed)
    if not processed and input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.T then
        toggleFOV()
    end
end)
   end,
})

local Toggle = MTab:CreateToggle({
   Name = "No Recoil",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
  local p = game:GetService("Players").LocalPlayer

task.spawn(function()
    while true do
        local t
        -- Search for the tool in the Backpack
        for _, v in pairs(p.Backpack:GetChildren()) do
            if v:IsA("Tool") and v.Name == "SP" then
                t = v
                break
            end
        end

        -- If the tool wasn't found in the Backpack, search in the Character
        if not t and p.Character then
            for _, v in pairs(p.Character:GetChildren()) do
                if v:IsA("Tool") and v.Name == "SP" then
                    t = v
                    break
                end
            end
        end

        -- If the tool is found, set its attributes
        if t then
            t:SetAttribute("rateOfFire", 100000000000)
            t:SetAttribute("reloadTime", 0)
            t:SetAttribute("recoilMax", Vector2.new(0, 0))
            t:SetAttribute("recoilMin", Vector2.new(0, 0))
            t:SetAttribute("spread", 0)
        end

        -- Wait 1 second before checking again
        task.wait(1)
    end
end)

   end,
})

local Toggle = MTab:CreateToggle({
   Name = "No reload/Inf ammo",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
 local p = game:GetService("Players").LocalPlayer

task.spawn(function()
    while true do
        local t
        -- Search for the tool in the Backpack
        for _, v in pairs(p.Backpack:GetChildren()) do
            if v:IsA("Tool") and v.Name == "SP" then
                t = v
                break
            end
        end

        -- If the tool wasn't found in the Backpack, search in the Character
        if not t and p.Character then
            for _, v in pairs(p.Character:GetChildren()) do
                if v:IsA("Tool") and v.Name == "SP" then
                    t = v
                    break
                end
            end
        end

        -- If the tool is found, set its attributes
        if t then
            t:SetAttribute("rateOfFire", 100000000000)
            t:SetAttribute("reloadTime", 0)
            t:SetAttribute("recoilMax", Vector2.new(0, 0))
            t:SetAttribute("recoilMin", Vector2.new(0, 0))
            t:SetAttribute("spread", 0)
             t:SetAttribute("fireMode", 'Auto')
             
        end

        -- Wait 1 second before checking again
        task.wait(1)
    end
end)
   end,
})

local Toggle = MTab:CreateToggle({
   Name = "Rapid Fire",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)

   end,
})


local Toggle = MTab:CreateToggle({
   Name = "Rust Hitsounds",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   
game:GetService("SoundService").HitGun.HitBody.SoundId = "rbxassetid://1255040462"


game:GetService("SoundService").HitGun.HitBody:Play()

local hitGun = game:GetService("SoundService"):FindFirstChild("HitGun")
if hitGun then
    local hitBody = hitGun:FindFirstChild("HitBody")
    if hitBody and hitBody:IsA("Sound") then
        hitBody.Volume = 10
    end
end
   end,
})
